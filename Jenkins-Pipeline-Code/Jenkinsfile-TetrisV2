pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'master', url: 'https://github.com/kubemindset/End-to-End-Kubernetes-DevSecOps-Tetris-Project.git'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('Tetris-V2') {
                    withSonarQubeEnv('sonar-scanner') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=TetrisVersion1.0 \
                        -Dsonar.projectKey=TetrisVersion1.0 '''
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        stage('Installing Dependencies') {
            steps {
                dir('Tetris-V2') {
                    sh 'npm install'
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('Tetris-V2') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Tetris-V2') {
                        withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {   
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t tetrisv2 .'
                        }
                    }
                }
            }
        }
        stage("Docker Image Pushing") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {   
                        sh 'docker tag tetrisv2 sonubhaware/tetrisv2:${BUILD_NUMBER}'
                        sh 'docker push sonubhaware/tetrisv2:${BUILD_NUMBER}'
                    }
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image sonubhaware/tetrisv2:${BUILD_NUMBER} > trivyimage.txt' 
            }
        }
        stage('Checkout Code') {
            steps {
                git branch: 'master', url: 'https://github.com/kubemindset/End-to-End-Kubernetes-DevSecOps-Tetris-Project.git'
            }
        } 
	stage('Update Deployment file') {
    environment {
        GIT_REPO_NAME = "End-to-End-Kubernetes-DevSecOps-Tetris-Project"
        GIT_USER_NAME = "kubemindset"
    }
    steps {
        dir('Manifest-file') {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "bhawaresonnal@gmail.com"
                    git config user.name "kubemindset"

                    echo "Build Number: ${BUILD_NUMBER}"

                    # Extract current image tag (handle missing case gracefully)
                    imageTag=$(grep -oP 'tetrisv2:\\K[0-9]+' deployment-service.yml || echo "latest")
                    echo "Previous image tag: $imageTag"

                    # Replace the image tag in the YAML file
                    sed -i "s/tetrisv2:${imageTag}/tetrisv2:${BUILD_NUMBER}/" deployment-service.yml

                    # Git operations
                    git add deployment-service.yml
                    git commit -m "Update deployment Image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                '''
            }
        }
    }
}

